{"title":"模拟实现call apply bind","date":"2019-03-23T04:05:18.872Z","slug":"common","comments":true,"updated":"2019-03-23T08:32:01.582Z","content":"<blockquote>\n<p>来直接上代码</p>\n</blockquote>\n<blockquote>\n<p>call 的思路</p>\n</blockquote>\n<p>不传入第一个参数，那么默认为 window<br>改变了 this 指向，让新的对象可以执行该函数。那么思路是否可以变成给新的对象添加一个函数，然后在执行完以后删除？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myCall = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> context = context || <span class=\"built_in\">window</span></span><br><span class=\"line\">  <span class=\"comment\">// 给 context 添加一个属性</span></span><br><span class=\"line\">  <span class=\"comment\">// getValue.call(a, 'yck', '24') =&gt; a.fn = getValue</span></span><br><span class=\"line\">  context.fn = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"comment\">// 将 context 后面的参数取出来</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = [...arguments].slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"comment\">// getValue.call(a, 'yck', '24') =&gt; a.fn('yck', '24')</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = context.fn(...args)</span><br><span class=\"line\">  <span class=\"comment\">// 删除 fn</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>apply 的实现</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myApply = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> context = context || <span class=\"built_in\">window</span></span><br><span class=\"line\">  context.fn = <span class=\"keyword\">this</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result</span><br><span class=\"line\">  <span class=\"comment\">// 需要判断是否存储第二个参数</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果存在，就将第二个参数展开</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    result = context.fn(...arguments[<span class=\"number\">1</span>])</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    result = context.fn()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>bind 和其他两个方法作用也是一致的，只是该方法会返回一个函数。并且我们可以通过 bind 实现柯里化。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myBind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span> !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Error'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = [...arguments].slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 返回一个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 因为返回了一个函数，我们可以 new F()，所以需要判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> F) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _this(...args, ...arguments)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _this.apply(context, args.concat(...arguments))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","next":{"title":"Generator(生成器) 异步编程解决方案","slug":"Generator"},"link":"https://annwvn.github.io/yangliu.github.io/post/common/"}