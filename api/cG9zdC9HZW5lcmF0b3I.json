{"title":"Generator 异步编程解决方案","date":"2019-03-21T11:25:00.000Z","slug":"Generator","comments":true,"updated":"2019-03-21T12:08:03.153Z","content":"<h1 id=\"Generator\">Generator<a href=\"post/Generator#Generator\"></a></h1><p>基本概念<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"来看一个栗子\">来看一个栗子~<a href=\"post/Generator#来看一个栗子\"></a></h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'ending'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hw = helloWorldGenerator()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw) <span class=\"comment\">// Object [Generator] &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此时他打印出来的是一个指向内部状态的指针对象，那么怎么来调用呢</p>\n</blockquote>\n<h3 id=\"必须调用遍历器对象的next方法-使得指针移向下一个状态-每调用一次，他就会从上次停下来的地方开始执行，直到遇到下一个yield表达式（或return语句）为止\">必须调用遍历器对象的next方法,使得指针移向下一个状态,每调用一次，他就会从上次停下来的地方开始执行，直到遇到下一个yield表达式（或return语句）为止<a href=\"post/Generator#必须调用遍历器对象的next方法-使得指针移向下一个状态-每调用一次，他就会从上次停下来的地方开始执行，直到遇到下一个yield表达式（或return语句）为止\"></a></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw.next())<span class=\"comment\">//&#123; value: 'hello', done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw.next())<span class=\"comment\">//&#123; value: 'world', done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw.next())<span class=\"comment\">//&#123; value: 'ending', done: true &#125; true表示遍历已经结束。</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw.next())<span class=\"comment\">//&#123; value: undefined, done: true &#125; 以后再调用next方法，返回的都是这个值。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>总结 ：无论 <code>return</code> 还是 <code>yield</code> 只要是超出最后一个<code>value</code>就会出现 <code>undefined</code>,那么<code>done</code>是什么,是不是以为上面就结束了了？那你错了，继续往下看小宝贝！<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'ending'</span> <span class=\"comment\">//此处是区别</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hw = helloWorldGenerator()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw) <span class=\"comment\">// Object [Generator] &#123;&#125;  没什么区别。对吧</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(hw.next())<span class=\"comment\">//&#123; value: 'hello', done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw.next())<span class=\"comment\">//&#123; value: 'world', done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw.next())<span class=\"comment\">//&#123; value: 'ending', done: false &#125; 来看着！！！</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw.next())<span class=\"comment\">//&#123; value: undefined, done: true &#125; 以后再调用next方法，返回的都是这个值。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>是不是？对吧！这是一个坑，yield还是有区别哒！他没有终止，只有value值是undefined时，done才会是true，我们可以根据done来判断是否结束此遍历</p>\n</blockquote>\n","next":{"title":"安雯","slug":"hello-world"},"link":"https://annwvn.github.io/yangliu.github.io/post/Generator/","toc":[{"title":"Generator","id":"Generator","index":"1"},{"title":"来看一个栗子~","id":"来看一个栗子","index":"2"}]}