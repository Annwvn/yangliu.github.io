{"title":"Generator(生成器) 异步编程解决方案","date":"2019-03-21T11:25:00.000Z","slug":"Generator","comments":true,"updated":"2019-03-21T15:51:28.395Z","content":"<h1 id=\"Generator\">Generator<a href=\"post/Generator#Generator\"></a></h1><p>基本概念<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同</span><br></pre></td></tr></table></figure></p>\n<p>安雯的理解<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">它是一个普通函数，调用它，可以返回一个遍历器对象(返回一个内部指针对象)，并且使用next()可以得到yield当前的值</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"来看一个栗子\">来看一个栗子~<a href=\"post/Generator#来看一个栗子\"></a></h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'ending'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hw = helloWorldGenerator()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw) <span class=\"comment\">// Object [Generator] &#123;&#125; 返回一个遍历器</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此时他打印出来的是一个指向内部状态的指针对象，那么怎么来调用呢</p>\n</blockquote>\n<h3 id=\"必须调用遍历器对象的next方法-使得指针移向下一个状态-每调用一次，他就会从上次停下来的地方开始执行，直到遇到下一个yield表达式（或return语句）为止\">必须调用遍历器对象的next方法,使得指针移向下一个状态,每调用一次，他就会从上次停下来的地方开始执行，直到遇到下一个yield表达式（或return语句）为止<a href=\"post/Generator#必须调用遍历器对象的next方法-使得指针移向下一个状态-每调用一次，他就会从上次停下来的地方开始执行，直到遇到下一个yield表达式（或return语句）为止\"></a></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(hw.next())<span class=\"comment\">//&#123; value: 'hello', done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw.next())<span class=\"comment\">//&#123; value: 'world', done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw.next())<span class=\"comment\">//&#123; value: 'ending', done: true &#125; true表示遍历已经结束。</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw.next())<span class=\"comment\">//&#123; value: undefined, done: true &#125; 以后再调用next方法，返回的都是这个值。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>总结 ：无论 <code>return</code> 还是 <code>yield</code> 只要是超出最后一个<code>value</code>就会出现 <code>undefined</code>,那么<code>done</code>呢，我们来试试！<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'ending'</span> <span class=\"comment\">//此处是区别</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hw = helloWorldGenerator()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw) <span class=\"comment\">// Object [Generator] &#123;&#125;  没什么区别。对吧</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(hw.next())<span class=\"comment\">//&#123; value: 'hello', done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw.next())<span class=\"comment\">//&#123; value: 'world', done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw.next())<span class=\"comment\">//&#123; value: 'ending', done: false &#125; 来看着！！！</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hw.next())<span class=\"comment\">//&#123; value: undefined, done: true &#125; 以后再调用next方法，返回的都是这个值。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>yield还是有区别哒！他没有终止,我们可以根据done来判断是否结束此遍历,yield是可以无限调用，知道最后一个么有时才会返回<code>{ value: undefined, done: true }</code></p>\n</blockquote>\n<h3 id=\"yield是什么\">yield是什么<a href=\"post/Generator#yield是什么\"></a></h3><p>1.yield是ES6的新关键字，使<code>生成器</code>函数执行暂停，yield关键字后面的表达式的值返回给生成器的<code>调用者</code>。<br>2.yield关键字实际返回一个<code>IteratorResult（迭代器）对象</code>，它有两个属性，<code>value</code>和<code>done</code>，分别代表返回值和是否完成。<br>3.yield<code>无法单独</code>工作，需要配合generator(生成器)的其他函数，如next，懒汉式操作，展现强大的可控性<br>4.yield并不能直接<code>生产值</code>，而是产生一个等待输出的函数<br>5.某个函数包含了yield，意味着这个函数已经是一个Generator<br>6.yield表达式本身没有返回值，或者说总是返回undefined(由next返回)<br>7.next()可无限调用，但既定循环完成之后总是返回undeinded，增强器懒汉型操作</p>\n<h3 id=\"yield语法\">yield语法<a href=\"post/Generator#yield语法\"></a></h3><p>1.yield表达式只能用在 Generator 函数里面，用在其他地方都会报错。<br>2.如果yield在其他表达式中，需要用()单独括起来</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">demo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span> + <span class=\"keyword\">yield</span>); <span class=\"comment\">// SyntaxError</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span> + <span class=\"keyword\">yield</span> <span class=\"number\">123</span>); <span class=\"comment\">// SyntaxError</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span> + (<span class=\"keyword\">yield</span>)); <span class=\"comment\">// OK</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span> + (<span class=\"keyword\">yield</span> <span class=\"number\">123</span>)); <span class=\"comment\">// OK</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.yield表达式用作函数参数或放在赋值表达式的右边，可以不加括号。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">demo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  foo(<span class=\"keyword\">yield</span> <span class=\"string\">'a'</span>, <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span>); <span class=\"comment\">// OK</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> input = <span class=\"keyword\">yield</span>; <span class=\"comment\">// OK</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"next方法的参数\">next方法的参数<a href=\"post/Generator#next方法的参数\"></a></h3><blockquote>\n<h1 id=\"可以传递参数，并且把传递的参数当做上次yield的返回值\"><a href=\"#可以传递参数，并且把传递的参数当做上次yield的返回值\" class=\"headerlink\" title=\"可以传递参数，并且把传递的参数当做上次yield的返回值\"></a>可以传递参数，并且把传递的参数当做上次yield的返回值</h1></blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; <span class=\"literal\">true</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reset = <span class=\"keyword\">yield</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reset) &#123; i = <span class=\"number\">-1</span>; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = f()</span><br><span class=\"line\"></span><br><span class=\"line\">g.next() <span class=\"comment\">// &#123; value: 0, done: false &#125;</span></span><br><span class=\"line\">g.next() <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">g.next(<span class=\"literal\">true</span>) <span class=\"comment\">// &#123; value: 0, done: false &#125; </span></span><br><span class=\"line\"><span class=\"comment\">//从当前传参true开始为0，之后递增，若中途再出现 传递参数true,从新0开始递增</span></span><br><span class=\"line\">g.next() <span class=\"comment\">//&#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">g.next() <span class=\"comment\">//&#123; value: 2, done: false &#125;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"再来一个栗子，深刻一下！\">再来一个栗子，深刻一下！<a href=\"post/Generator#再来一个栗子，深刻一下！\"></a></h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"number\">2</span> * (<span class=\"keyword\">yield</span> (x + <span class=\"number\">1</span>));</span><br><span class=\"line\">  <span class=\"keyword\">var</span> z = <span class=\"keyword\">yield</span> (y / <span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (x + y + z);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = foo(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//无参数，yield返回值是undefined y = 2*undefined 即NAN</span></span><br><span class=\"line\">a.next() <span class=\"comment\">// Object&#123;value:6, done:false&#125; </span></span><br><span class=\"line\"><span class=\"comment\">//此时之后面都是NaN，直到遇见return </span></span><br><span class=\"line\">a.next() <span class=\"comment\">// Object&#123;value:NaN, done:false&#125;</span></span><br><span class=\"line\">a.next() <span class=\"comment\">// Object&#123;value:NaN, done:true&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = foo(<span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">//由于next方法的参数表示上一个yield表达式的返回值，所以在第一次使用next方法时，传递参数是无效的，</span></span><br><span class=\"line\"><span class=\"comment\">//第一次调用b的next方法时，返回x+1的值6</span></span><br><span class=\"line\">b.next() <span class=\"comment\">// &#123; value:6, done:false &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//此时传递的参数12，会被当成上一个yield返回值是12，y=24</span></span><br><span class=\"line\">b.next(<span class=\"number\">12</span>) <span class=\"comment\">// &#123; value:8, done:false &#125; // 执行z 得出8</span></span><br><span class=\"line\"><span class=\"comment\">//此时传递的参数12，</span></span><br><span class=\"line\">b.next(<span class=\"number\">13</span>) <span class=\"comment\">// &#123; value:42, done:true &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"for…of循环\">for…of循环<a href=\"post/Generator#for…of循环\"></a></h3><p>for…of循环可以自动遍历 Generator 函数运行时生成的Iterator对象，且此时不再需要调用next方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">numbers</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 扩展运算符</span></span><br><span class=\"line\">[...numbers()] <span class=\"comment\">// [1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array.from 方法</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(numbers()) <span class=\"comment\">// [1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y] = numbers();</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for...of 循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> n <span class=\"keyword\">of</span> numbers()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"yield-表达式\">yield* 表达式<a href=\"post/Generator#yield-表达式\"></a></h3><p>由来：如果在 Generator 函数内部，调用另一个 Generator 函数，默认情况下是没有效果的</p>\n<h1 id=\"怎么办呢？\">怎么办呢？<a href=\"post/Generator#怎么办呢？\"></a></h1><p>这个就需要用到yield*表达式，用来在一个 Generator 函数里面执行另一个 Generator 函数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义一个Generator函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> delegatedIterator = (<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'Hello!'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'Bye!'</span>;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"comment\">//再来一个，并且调用上面</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> delegatingIterator = (<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'Greetings!'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* delegatedIterator;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'Ok, bye.'</span>;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//for of 循坏，当当当 出结果~</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> delegatingIterator) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"Greetings!</span></span><br><span class=\"line\"><span class=\"comment\">// \"Hello!\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"Bye!\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"Ok, bye.\"</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>总结：yield*后面的 Generator 函数（没有return语句时），不过是for…of的一种简写形式</p>\n</blockquote>\n","next":{"title":"vue双向绑定","slug":"about"},"link":"https://annwvn.github.io/yangliu.github.io/post/Generator/","toc":[{"title":"Generator","id":"Generator","index":"1"},{"title":"来看一个栗子~","id":"来看一个栗子","index":"2"},{"title":"","id":"可以传递参数，并且把传递的参数当做上次yield的返回值","index":"3"},{"title":"再来一个栗子，深刻一下！","id":"再来一个栗子，深刻一下！","index":"4"},{"title":"怎么办呢？","id":"怎么办呢？","index":"5"}]}